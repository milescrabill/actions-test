name: merge
on:
  push:
    branches:
      - 'master'
      - 'release/*'
      - 'develop'

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    - name: download deps
      run: |
        # exit on errors
        set -exv
        set -o pipefail

        # download hub release, extract binary to /usr/local/bin
        HUB_VERSION=2.12.7
        curl -s -L -o /tmp/hub.tgz https://github.com/github/hub/releases/download/v$HUB_VERSION/hub-linux-amd64-$HUB_VERSION.tgz
        tar zxvf /tmp/hub.tgz -C /tmp
        sudo mv /tmp/hub-linux-amd64-$HUB_VERSION/bin/hub /usr/local/bin

    - name: configure git and ssh keys
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        # exit on errors
        set -exv
        set -o pipefail

        # use ssh urls
        git config --global url."git@github.com:".insteadOf "https://github.com/"

        # git config for merge commits
        git config --global user.email "automerge@example.com"
        git config --global user.name "automerge"
        git config --global push.default matching

        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null

        # add github's pubkey to known_hosts
        echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts

        # add SSH deploy key via stdin
        # output will filter this
        echo "$DEPLOY_KEY" | ssh-add -

    - name: create and merge PRs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        # exit on errors
        set -exv
        set -o pipefail

        # this is automatically provided
        # see: https://help.github.com/en/articles/virtual-environments-for-github-actions#github_token-secret
        if [[ -z "${GITHUB_TOKEN}" ]]; then
          echo "You must include the GITHUB_TOKEN as an environment variable."
          exit 1
        fi

        # get branches for all remotes
        git fetch --all

        # clean up merged branches
        git remote prune origin

        function open_and_merge_pull_request() {
          echo "DEBUG: making pull request from ${GITHUB_REF} to $1"

          # if $1 branch does not exist origin
          if [ -z $(git ls-remote origin "$1") ]; then
            echo "Could not find expected branch '$1' on remote 'origin'"
            exit 1
          fi

          # create PR, record PR url in $PR_URL
          PR_URL=$(hub pull-request -b $1 -h ${GITHUB_REF} -m 'Automated Merge')
          if [ -z "$PR_URL"  ]; then
            echo 'Failed to get PR URL'
          else
            # checkout destination branch,
            # merge PR and push merge commit
            git fetch origin "${1}" && \
              git checkout "${1}" && \
              git reset --hard origin/"${1}"
            hub merge ${PR_URL}
            git push origin ${1} && \
              echo "DEBUG: successfully pushed ${GITHUB_REF} merged into $1" || \
              echo "DEBUG: pushing ${GITHUB_REF} merged into $1 failed"
          fi
        }

        # if we're on master
        if [ "${GITHUB_REF}" == "refs/heads/master" ]; then
          # create PR from master => develop
          open_and_merge_pull_request develop;
          # create PRs from master => release branches
          for branch in $(git branch -r | grep -o 'release/.*'); do
            open_and_merge_pull_request "${branch}";
          done
          # create PRs from master => hotfix branches
          for branch in $(git branch -r | grep -o 'hotfix/.*'); do
            open_and_merge_pull_request "${branch}";
          done
        fi

        # if we're on a release branch
        if [[ "${GITHUB_REF}" =~ refs/heads/release\/.* ]]; then
          # create PR from release => develop
          open_and_merge_pull_request develop;
        fi

        # if we're on develop
        if [ "${GITHUB_REF}" == "refs/heads/develop" ]; then
          # create PR from develop => sprint branches
          for branch in $(git branch -r | grep -o 'sprint/.*'); do
            open_and_merge_pull_request "${branch}";
          done
        fi
