name: merge

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    - name: download deps
      run: |
        # exit on errors
        set -e
        set -o pipefail

        sudo apt-get update
        sudo apt-get install -y curl git

        # download hub release, extract binary to /usr/local/bin
        HUB_VERSION=2.12.7
        curl -s -L -o /tmp/hub.tgz https://github.com/github/hub/releases/download/v$HUB_VERSION/hub-linux-amd64-$HUB_VERSION.tgz
        tar zxvf /tmp/hub.tgz -C /tmp
        sudo mv /tmp/hub-linux-amd64-$HUB_VERSION/bin/hub /usr/local/bin

    - name: create and merge PRs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # exit on errors
        set -e
        set -o pipefail

        # this is automatically provided
        # see: https://help.github.com/en/articles/virtual-environments-for-github-actions#github_token-secret
        if [[ -z "${GITHUB_TOKEN}" ]]; then
          echo "You must include the GITHUB_TOKEN as an environment variable."
          exit 1
        fi

        # git config for merge commits
        git config --global user.email "foo@bar.com"
        git config --global user.name "foo bar"
        git config --global push.default matching

        # get branches for all remotes
        git fetch --all

        # clean up merged branches
        git remote prune origin

        function open_and_merge_pull_request() {
          echo "making pull request from ${GITHUB_REF} to $1"
          # create PR, record PR url
          hub pull-request -b $1 -h ${GITHUB_REF} -m 'Automated Merge' 1>/tmp/${1}_pr_url  || echo 'creating PR failed'
          if [ "$?" == 0]; then
            # checkout destination branch,
            # merge PR and push merge commit
            git fetch origin "${1}" && \
              git checkout "${1}" && \
              git reset --hard origin/"${1}"
            hub merge <(/tmp/${1}_pr_url)
            git push origin ${1}
          fi
        }

        # if we're on master
        if [ "${GITHUB_REF}" == "refs/heads/master" ]; then
          git branch -r | grep -o 'hotfix/.*' | while read -r branch ; do
            open_and_merge_pull_request "${branch}";
          done
        fi


